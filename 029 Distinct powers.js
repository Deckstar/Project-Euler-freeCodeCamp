/**
Accessed on 16 September 2019 : https://learn.freecodecamp.org/coding-interview-prep/project-euler/problem-29-distinct-powers/

----------------------------------------------------------------------------------------
Project Euler: Problem 29: Distinct powers
Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:

2^2=4, 2^3=8, 2^4=16, 2^5=32

3^2=9, 3^3=27, 3^4=81, 3^5=243

4^2=16, 4^3=64, 4^4=256, 4^5=1024

5^2=25, 5^3=125, 5^4=625, 5^5=3125

If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:

4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125

How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ n and 2 ≤ b ≤ n?
----------------------------------------------------------------------------------------
**/

function distinctPowers(n) {

  let distinctTerms = [];

  // Very easy with Javascript - just brute force it: make a list of all the squares up to n, being careful not to double-count
  for (let a = 2; a <= n; a++) {
    for (let b = 2; b <= n; b++) {
      let term = a ** b;

      if (!distinctTerms.includes(term)) { // don't add the current a^b to the array of distinct terms if it's already in there
        distinctTerms.push(term)
      }
    }
  }

  // The final answer comes quickly, although its computation is theoretically quite slow at O(n^2).
  let answer = distinctTerms.length;

  console.log("For a and b <= " + n + " there are " + answer + " distinct terms.\n")
  return answer;
}


distinctPowers(15); // 177
distinctPowers(20); // 324
distinctPowers(25); // 519
distinctPowers(30); // 755
distinctPowers(100); // this one gives the wrong answer (9220 instead of 9183). JavaScript sucks at big numbers! :/ So we can't solve the original Project Euler problem this way, even though we can still pass the FCC tests.