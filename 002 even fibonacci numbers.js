/**
Accessed on 25 August 2019 : https://learn.freecodecamp.org/coding-interview-prep/project-euler/problem-2-even-fibonacci-numbers

----------------------------------------------------------------------------------------
Project Euler: Problem 2: Even Fibonacci Numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed nth term, find the sum of the even-valued terms.
----------------------------------------------------------------------------------------
**/

function fiboEvenSum(n) {

  let fibonacciArray = [1, 1]; // we start at the 1st term (i=0); the first term of Fibonacci are 1 and 1

  let i = 2;
  while (fibonacciArray.length <= n + 1) { // first, let's find all the Fibonaccy numbers below the n-th term (as defined by freecodecamp... that's why I have the strange (n + 1) instead of just n â€” freeCodeCamp forgot that Fibonacci starts with two 1's)

    fibonacciArray.push(fibonacciArray[i - 1] + fibonacciArray[i - 2]) // for higher terms, push the sum of the last two terms (this is the Fibonaccy sequence)

    // console.log("I just pushed " + (fibonacciArray[i - 1] + fibonacciArray[i - 2]));
    i++; // increment i
  }

  let fibonacciArray_Evens = fibonacciArray.filter(num => num % 2 == 0) // make a new array with only the even-valued terms

  // console.log(fibonacciArray_Evens)

  let sumOfEvens = fibonacciArray_Evens.reduce((total, num) => total + num) // reduce is a function that lets us turn an array into one variable, using some rule. Here, we start with a total of zero, and add every number in the array, until we get our final total.


  console.log("All the even Fibonacci numbers below term number " + n + " sum up to " + sumOfEvens);
  return sumOfEvens;
}

fiboEvenSum(10);
